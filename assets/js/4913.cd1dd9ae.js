"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[4913],{64913:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>a,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"pyrefly-faq","title":"FAQ","description":"Frequently Asked Questions about Pyrefly, a PEP 484 compliant Type Checker for Python and IDE extension.","source":"@site/docs/pyrefly-faq.mdx","sourceDirName":".","slug":"/pyrefly-faq","permalink":"/en/docs/pyrefly-faq","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/pyrefly-faq.mdx","tags":[],"version":"current","frontMatter":{"id":"pyrefly-faq","title":"FAQ","slug":"/pyrefly-faq","description":"Frequently Asked Questions about Pyrefly, a PEP 484 compliant Type Checker for Python and IDE extension."},"sidebar":"docsSidebar","previous":{"title":"Automating Type Annotations","permalink":"/en/docs/autotype"}}');var r=o(74848),i=o(28453);const a={id:"pyrefly-faq",title:"FAQ",slug:"/pyrefly-faq",description:"Frequently Asked Questions about Pyrefly, a PEP 484 compliant Type Checker for Python and IDE extension."},s="Pyrefly Frequently Asked Questions",l={},h=[{value:"How do I pronounce Pyrefly?",id:"how-do-i-pronounce-pyrefly",level:3},{value:"What is the relationship to Pyre?",id:"what-is-the-relationship-to-pyre",level:3},{value:"Yet another Type Checker! Why not improve the ones adopted by the community already?",id:"yet-another-type-checker-why-not-improve-the-ones-adopted-by-the-community-already",level:3},{value:"Why Rust?",id:"why-rust",level:3},{value:"Do you plan to build an LSP?",id:"do-you-plan-to-build-an-lsp",level:3},{value:"Where do I report bugs?",id:"where-do-i-report-bugs",level:3},{value:"Can I contribute to Pyrefly?",id:"can-i-contribute-to-pyrefly",level:3},{value:"How do I know this project won&#39;t go unmaintained after a year?",id:"how-do-i-know-this-project-wont-go-unmaintained-after-a-year",level:3},{value:"This is cool, I want to learn more about the technical details.",id:"this-is-cool-i-want-to-learn-more-about-the-technical-details",level:3},{value:"I don&#39;t like Python&#39;s Type System. Stop wasting your time.",id:"i-dont-like-pythons-type-system-stop-wasting-your-time",level:3}];function d(e){const t={a:"a",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"pyrefly-frequently-asked-questions",children:"Pyrefly Frequently Asked Questions"})}),"\n",(0,r.jsx)(t.h3,{id:"how-do-i-pronounce-pyrefly",children:"How do I pronounce Pyrefly?"}),"\n",(0,r.jsx)(t.p,{children:'It\'s pronounced PIE-ur-fly, rhyming with "firefly."'}),"\n",(0,r.jsx)(t.h3,{id:"what-is-the-relationship-to-pyre",children:"What is the relationship to Pyre?"}),"\n",(0,r.jsxs)(t.p,{children:["Pyrefly is a ground-up rebuild that doesn\u2019t share any core type checking code with Pyre. Not only is Pyrefly written in a new language (Rust instead of OCaml), but its design deviates in a major way from ",(0,r.jsx)(t.a,{href:"https://pyre-check.org/",children:"Pyre"}),". Rust enables us to deliver substantial performance improvements and support multiple operating systems (including Windows). Beyond the core type checker itself, there are helper tooling and many lessons learned that we will take from Pyre and the community of Python type checking maintainers who have done tremendous work to get the state of type checking to where it is today."]}),"\n",(0,r.jsx)(t.h3,{id:"yet-another-type-checker-why-not-improve-the-ones-adopted-by-the-community-already",children:"Yet another Type Checker! Why not improve the ones adopted by the community already?"}),"\n",(0,r.jsx)(t.p,{children:"We are standing on the shoulders of giants. The contributions to Python typing by Mypy, Pyright, Pytype, Pyre and others have been invaluable. We borrowed concepts and learned from them as we rolled our own. Open source conformance matters to us a lot. While we might make some opinionated decisions, we'll adhere to the PEP process. Pyre was the only type checker that could scale for Meta\u2019s needs and was starting to show its age, so we started with a ground-up rewrite aimed at usability and performance."}),"\n",(0,r.jsx)(t.p,{children:"We built a custom engine for incremental computation and designed our type-checking algorithm based on years of experience in gradual typing theory and Rust expertise. By open-sourcing this technology we hope it can serve projects of any size well."}),"\n",(0,r.jsx)(t.h3,{id:"why-rust",children:"Why Rust?"}),"\n",(0,r.jsx)(t.p,{children:"We would have preferred to write Pyrefly in Python, but we didn't think we could hit our ambitious performance goals using Python today (hopefully future work around free-threaded Python and JIT changes that). After ruling out Python, we wanted something that was safe, cross-platform, compiled to WASM (for a Playground experience). Rust and Go are probably the best choices for those goals, and our team at Meta had more experience with Rust."}),"\n",(0,r.jsx)(t.h3,{id:"do-you-plan-to-build-an-lsp",children:"Do you plan to build an LSP?"}),"\n",(0,r.jsxs)(t.p,{children:["Yes. See our ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/pyrefly/milestone/1",children:"roadmap"})," for details."]}),"\n",(0,r.jsx)(t.h3,{id:"where-do-i-report-bugs",children:"Where do I report bugs?"}),"\n",(0,r.jsxs)(t.p,{children:["Please open an ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/pyrefly/issues",children:"issue on our GitHub"})," page. You can leave feature requests there as well :) Our current goal is to get through our first major milestone, and after that we can look at bugs and features beyond the current roadmap."]}),"\n",(0,r.jsx)(t.h3,{id:"can-i-contribute-to-pyrefly",children:"Can I contribute to Pyrefly?"}),"\n",(0,r.jsxs)(t.p,{children:["Please see the: ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/pyrefly/blob/main/CONTRIBUTING.md",children:"contributing guidelines"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"how-do-i-know-this-project-wont-go-unmaintained-after-a-year",children:"How do I know this project won't go unmaintained after a year?"}),"\n",(0,r.jsx)(t.p,{children:"Great question. We have made a substantial investment in Pyrefly, use it internally and aligned open source maintainability as a key principle for starting this project in the first place. We\u2019re in it for the long haul. Using it is the best way to encourage further investment from our leadership."}),"\n",(0,r.jsx)(t.h3,{id:"this-is-cool-i-want-to-learn-more-about-the-technical-details",children:"This is cool, I want to learn more about the technical details."}),"\n",(0,r.jsxs)(t.p,{children:["See our ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/pyrefly/blob/main/README.md",children:"README.md"})," for the high level design. We plan to add more detailed documentation along with announcements on ",(0,r.jsx)(t.a,{href:"https://engineering.fb.com/",children:"https://engineering.fb.com"})]}),"\n",(0,r.jsx)(t.h3,{id:"i-dont-like-pythons-type-system-stop-wasting-your-time",children:"I don't like Python's Type System. Stop wasting your time."}),"\n",(0,r.jsx)(t.p,{children:"Tell us more - seriously! We want to hear your objections to typing. We hope that better tooling, improvements to the type system and well typed libraries will help provide make development easier. If all else fails our fast code navigation and inference algorithm might spark joy in your IDE, so give us a chance."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Curious about something else or just want to chat about bolting types onto Python, join us on ",(0,r.jsx)(t.a,{href:"https://discord.gg/Cf7mFQtW7W",children:"Discord"}),"."]})})]})}function y(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);