"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7632],{27632:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"installation","title":"Installation","description":"How to install Pyrefly","source":"@site/docs/installation.mdx","sourceDirName":".","slug":"/installation","permalink":"/en/docs/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/installation.mdx","tags":[],"version":"current","frontMatter":{"title":"Installation","description":"How to install Pyrefly"},"sidebar":"docsSidebar","previous":{"title":"Typing Features and PEPS","permalink":"/en/docs/python-features-and-peps"},"next":{"title":"Configuration","permalink":"/en/docs/configuration"}}');var t=i(74848),o=i(28453);const l={title:"Installation",description:"How to install Pyrefly"},s=void 0,c={},a=[{value:"Install",id:"install",level:2},{value:"Using UV",id:"using-uv",level:3},{value:"Using Poetry",id:"using-poetry",level:3},{value:"Using Pip",id:"using-pip",level:3},{value:"Using Pixi",id:"using-pixi",level:3},{value:"Using Conda",id:"using-conda",level:3},{value:"Configure",id:"configure",level:2},{value:"Upgrading Pyrefly",id:"upgrading-pyrefly",level:2},{value:"Add Pyrefly to CI",id:"add-pyrefly-to-ci",level:2},{value:"A few notes about this setup:",id:"a-few-notes-about-this-setup",level:3},{value:"Pre-commit Integration",id:"pre-commit-integration",level:2},{value:"Quick\u2011start",id:"quickstart",level:2},{value:"Install pre-commit",id:"install-pre-commit",level:2},{value:"Testing the hook",id:"testing-the-hook",level:2},{value:"Introduce a cheap error",id:"introduce-a-cheap-error",level:3},{value:"Stage &amp; commit",id:"stage--commit",level:3},{value:"Fix &amp; recommit",id:"fix--recommit",level:3},{value:"CI parity (optional)",id:"ci-parity-optional",level:2},{value:"How this helps your project",id:"how-this-helps-your-project",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Pyrefly is available on ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/pyrefly/",children:"PyPI"})," with a new release every Monday. We often release more frequently when shipping new features and bug fixes."]}),"\n",(0,t.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.code,{children:"uv"}),", ",(0,t.jsx)(n.code,{children:"poetry"}),", ",(0,t.jsx)(n.code,{children:"pip"}),", ",(0,t.jsx)(n.code,{children:"pixi"})," or ",(0,t.jsx)(n.code,{children:"conda"})," to install the package if you want to experiment with our tool."]}),"\n",(0,t.jsxs)(n.p,{children:["Simply ",(0,t.jsx)(n.code,{children:"cd"})," into your project directory and run:"]}),"\n",(0,t.jsx)(n.h3,{id:"using-uv",children:"Using UV"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"uvx pyrefly init\nuvx pyrefly check\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will install Pyrefly using UV, ",(0,t.jsx)(n.a,{href:"../migrating-to-pyrefly",children:"migrate"})," your existing type checker configuration, and run the Pyrefly type checker."]}),"\n",(0,t.jsx)(n.h3,{id:"using-poetry",children:"Using Poetry"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"poetry add --group dev pyrefly\npoetry run pyrefly init\npoetry run pyrefly check\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-pip",children:"Using Pip"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pip install pyrefly\npyrefly init\npyrefly check\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-pixi",children:"Using Pixi"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pixi add pyrefly\npixi run pyrefly init\npixi run pyrefly check\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-conda",children:"Using Conda"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"conda install -c conda-forge pyrefly\npyrefly init\npyrefly check\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configure",children:"Configure"}),"\n",(0,t.jsxs)(n.p,{children:["Set up a basic configuration file to type-check your project. You can add configuration options to a ",(0,t.jsx)(n.code,{children:"pyproject.toml"})," file or create a ",(0,t.jsx)(n.code,{children:"pyrefly.toml"})," file in your project directory. All ",(0,t.jsx)(n.a,{href:"../configuration",children:"configuration options are documented here"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[tool.pyrefly]\nsearch_path = [\n    "example_directory/..."\n]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Then, run ",(0,t.jsx)(n.code,{children:"pyrefly check"})," again, and the tool will use your configuration options."]}),"\n",(0,t.jsx)(n.p,{children:"The tool may return a list of type errors; this is perfectly normal. You have a few options at this point:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"# pyrefly: ignore"})," comments to silence the errors. This will get your project to a clean type-checking state, and you can reduce the number of errors as you go. We've included a script that can do this for you:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pyrefly check --suppress-errors\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Use extra configuration options to silence specific categories of errors or exclude files with more errors than average."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"upgrading-pyrefly",children:"Upgrading Pyrefly"}),"\n",(0,t.jsx)(n.p,{children:"Upgrading the version of Pyrefly you're using or a third-party library you depend on can reveal new type errors in your code. Fixing them all at once is often unrealistic. We've written scripts to help you temporarily silence them."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Step 1\npyrefly check --suppress-errors\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Step 2\n<run your formatter of choice>\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Step 3\npyrefly check --remove-unused-ignores\n"})}),"\n",(0,t.jsx)(n.p,{children:"Repeat these steps until you achieve a clean formatting run and a clean type check."}),"\n",(0,t.jsxs)(n.p,{children:["This will add ",(0,t.jsx)(n.code,{children:"# pyrefly: ignore"})," comments to your code, enabling you to silence errors and return to fix them later. This can make the process of upgrading a large codebase much more manageable."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"add-pyrefly-to-ci",children:"Add Pyrefly to CI"}),"\n",(0,t.jsx)(n.p,{children:"After your project passes type checks without errors, you can prevent new bugs from being introduced. Enforce this through CI (Continuous Integration) to prevent other maintainers from merging code with errors. Here is an example for GitHub."}),"\n",(0,t.jsx)(n.p,{children:"Save your workflow in the following path within your repository:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:".github/workflows/typecheck.yml\n"})}),"\n",(0,t.jsxs)(n.p,{children:["GitHub automatically detects ",(0,t.jsx)(n.code,{children:".yml"})," files within ",(0,t.jsx)(n.code,{children:".github/workflows/"})," and sets up the defined workflows."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"name: Pyrefly Type Check\n\non:\n  pull_request:\n    branches: [main]\n  workflow_dispatch:  # Allows manual triggering from the GitHub UI\n\njobs:\n  typecheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n\n      # Install Python dependencies and create environment\n      - name: Install dependencies and run type checking\n        run: |\n          python -m venv .venv\n          source .venv/bin/activate\n          python -m pip install --upgrade pip\n          # Install your dependencies; adjust the following lines as needed\n          pip install -r requirements-dev.txt\n\n      - name: Install Pyrefly\n        run: pip install pyrefly\n\n      - name: Run Pyrefly Type Checker\n        run: pyrefly check\n"})}),"\n",(0,t.jsx)(n.h3,{id:"a-few-notes-about-this-setup",children:"A few notes about this setup:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Building your environment and installing dependencies will enhance type safety by checking the types of imports. ",(0,t.jsx)(n.em,{children:"This is not required, but encouraged!"})]}),"\n",(0,t.jsxs)(n.li,{children:["Simply drop in ",(0,t.jsx)(n.code,{children:"pyrefly check"})," to existing workflows that build and test your environment."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"      - name: Run Pyrefly Type Checker\n        run: pyrefly check\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Your ",(0,t.jsx)(n.code,{children:"pyrefly.toml"})," or Pyrefly configs in your ",(0,t.jsx)(n.code,{children:"pyproject.toml"})," will be automatically detected. Learn how to ",(0,t.jsx)(n.a,{href:"../configuration",children:"configure Pyrefly here"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"pre-commit-integration",children:"Pre-commit Integration"}),"\n",(0,t.jsx)(n.p,{children:"Pyrefly is fast! This means you can run it before every commit to get immediate feedback on type errors without slowing down your workflow. Pre-commit let's you do this automatically."}),"\n",(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f Warning: ",(0,t.jsx)(n.code,{children:"pyrefly check"})," must be installed and available on your path in CI or locally."]}),"\n",(0,t.jsx)(n.h2,{id:"quickstart",children:"Quick\u2011start"}),"\n",(0,t.jsxs)(n.p,{children:["Add this to your ",(0,t.jsx)(n.code,{children:".pre-commit-config.yaml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- repo: https://github.com/facebook/pyrefly\n  rev: 0.29.0\n  hooks:\n    - id: pyrefly-typecheck\n"})}),"\n",(0,t.jsx)(n.h2,{id:"install-pre-commit",children:"Install pre-commit"}),"\n",(0,t.jsxs)(n.p,{children:["You only need to do this once per clone. You can also include this in your as script or in your build/setup commands like ",(0,t.jsx)(n.code,{children:"setup.py"})," or ",(0,t.jsx)(n.code,{children:"setup.cfg"})," so it's installed for everyone."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 1. Once per clone\npip install pre-commit          # or pipx install pre\u2011commit\npre-commit install              # writes .git/hooks/pre-commit\n\n# 2. Upgrade hooks when you bump versions in YAML\npre-commit autoupdate\n\n# 3. Manual full run (good before the first push or when you add the hook)\npre-commit run --all-files\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-the-hook",children:"Testing the hook"}),"\n",(0,t.jsx)(n.h3,{id:"introduce-a-cheap-error",children:"Introduce a cheap error"}),"\n",(0,t.jsxs)(n.p,{children:["Edit any ",(0,t.jsx)(n.code,{children:".py"})," file and deliberately return ",(0,t.jsx)(n.code,{children:"None"})," where the function is annotated to return ",(0,t.jsx)(n.code,{children:"int"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def foo() -> int:\n    return None\n"})}),"\n",(0,t.jsx)(n.h3,{id:"stage--commit",children:"Stage & commit"}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git add test.py\ngit commit -m "test: pre\u2011commit hook check"\npyrefly check............................................................Failed\n- hook id: pyrefly-typecheck\n- exit code: 1\n\n INFO Checking project configured at `/myproject/pyrefly.toml`\nERROR /myproject/test.py:2:12-16: Returned type `None` is not assignable to declared return type `int` [bad-return]\n'})}),"\n",(0,t.jsx)(n.p,{children:"You should see Pyrefly fail as above, preventing the commit from being created."}),"\n",(0,t.jsx)(n.h3,{id:"fix--recommit",children:"Fix & recommit"}),"\n",(0,t.jsxs)(n.p,{children:["Correct the code, ",(0,t.jsx)(n.code,{children:"git add"})," it again, and re\u2011run ",(0,t.jsx)(n.code,{children:"git commit"}),"; this time the hook passes."]}),"\n",(0,t.jsx)(n.h2,{id:"ci-parity-optional",children:"CI parity (optional)"}),"\n",(0,t.jsxs)(n.p,{children:["Add this to your GitHub Action so the exact same hook set runs server\u2011side. This prevents anyone from pushing with ",(0,t.jsx)(n.code,{children:"--no\u2011verify"}),". Note that you still need ",(0,t.jsx)(n.code,{children:"pyrefly"})," installed and available on your path. We plan to create a standalone pre-commit project in the future."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# You can skip this if you already have pyrefly installed\n- name: Install pyrefly\nrun: |\n    python -m venv .venv\n    source .venv/bin/activate\n    python -m pip install --upgrade pip\n    pip install pyrefly\n    # persists the venv\u2019s scripts dir\n    echo "$GITHUB_WORKSPACE/.venv/bin" >> "$GITHUB_PATH"\n\n- uses: pre-commit/action@v3.0.1\n  with:\n    extra_args: --all-files\n'})}),"\n",(0,t.jsx)(n.p,{children:"Most likely you'll have some dependencies installed already, but you can pip install pyrefly directly using the yaml snippet above."}),"\n",(0,t.jsx)(n.h2,{id:"how-this-helps-your-project",children:"How this helps your project"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Earlier feedback"}),": Developers see type mistakes immediately, not minutes later in CI."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistent enforcement"}),": Every commit\u2014local or on CI\u2014runs the same pyrefly check command."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clean history"}),': Because Pyrefly checks before the commit object is created, you avoid "fix type error" fix\u2011up commits.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Culture of quality"}),": Blocking problems at the doorstep raises the baseline for new contributors."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);